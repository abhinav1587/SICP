* Exercise 2.81
Louis Reasoner has noticed that apply-generic may try to coerce the arguments to each other’s type even if they already have the same type. Therefore, he reasons, we need to put procedures in the coercion table to coerce arguments of each type to their own type. For example, in addition to the scheme-number->complex coercion shown above, he would do:

#+BEGIN_SRC scheme
  (define (scheme-number->scheme-number n) n)
  (define (complex->complex z) z)

  (put-coercion 'scheme-number 'scheme-number
                scheme-number->scheme-number)

  (put-coercion 'complex 'complex 
                complex->complex)
#+END_SRC

** 1. With Louis’s coercion procedures installed, what happens if apply-generic is called with two arguments of type scheme-number or two arguments of type complex for an operation that is not found in the table for those types? For example, assume that we’ve defined a generic exponentiation operation:
#+BEGIN_SRC scheme
(define (exp x y) 
  (apply-generic 'exp x y))
#+END_SRC

and have put a procedure for exponentiation in the Scheme-number package but not in any other package:

#+BEGIN_SRC scheme
;; following added to Scheme-number package
(put 'exp 
     '(scheme-number scheme-number)
     (lambda (x y) 
       (tag (expt x y)))) 
       ; using primitive expt
#+END_SRC
*** What happens if we call exp with two complex numbers as arguments?
- Since exp does not have an operation for two complex numbers 
~(proc (get op type-tags))~ will return an empty list hence failing the 
~(if proc~ verification.
- The code then tries to do a coercion. ~(cond (t1->t2~ results in ~(apply-generic op (t1->t2 a1) a2))~ being called.
- This is equivalent to ~(apply-generic op a1 a2)~ since the procedure ~complex->complex~ is an identity function.
- The description of the steps above is an infinite loop call of the ~apply-generic~ procedure with the same arguments.

** 2. Is Louis correct that something had to be done about coercion with arguments of the same type, or does apply-generic work correctly as is?
Louis' suggestion does not help. It causes an infinite loop at worse.
~apply-generic~ would work correctly if the types are found. Else, it would fail with the errors.

** 3. Modify apply-generic so that it doesn’t try coercion if the two arguments have the same type.

~apply-generic~ for coercion

#+BEGIN_SRC scheme
  (define (apply-generic op . args)
    (let ((type-tags (map type-tag args)))
      (let ((proc (get op type-tags)))
        (if proc
            (apply proc (map contents args))
            (if (= (length args) 2)
                (let ((type1 (car type-tags))
                      (type2 (cadr type-tags))
                      (a1 (car args))
                      (a2 (cadr args)))
                  (if (not (eq? type1 type2)) ; check for equality of types
                      (let ((t1->t2 (get-coercion type1 type2))
                            (t2->t1 (get-coercion type2 type1)))
                        (cond (t1->t2
                               (apply-generic op (t1->t2 a1) a2))
                              (t2->t1
                               (apply-generic op a1 (t2->t1 a2)))
                              (else
                               (error "No method for these types"
                                      (list op type-tags)))))
                      (error "No method for these types"
                             (list op type-tags)))))))
      (error "No method for these types"
             (list op type-tags))))
#+END_SRC
