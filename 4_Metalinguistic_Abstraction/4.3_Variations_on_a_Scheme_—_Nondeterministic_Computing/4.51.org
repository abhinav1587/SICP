#+Title: Exercise 4.51

**** Implement a new kind of assignment called ~permanent-set!~ that is not undone upon failure. For example, we can choose two distinct 
elements from a list and count the number of trials required to make a successful choice as follows:

#+BEGIN_SRC scheme :eval no
  (define count 0)

  (let ((x (an-element-of '(a b c)))
        (y (an-element-of '(a b c))))
    (permanent-set! count (+ count 1))
    (require (not (eq? x y)))
    (list x y count))
  ;;; Starting a new problem
  ;;; Amb-Eval value:
  (a b 2)

  ;;; Amb-Eval input:
  try-again
  ;;; Amb-Eval value:
  (a c 3)

#+END_SRC


#+BEGIN_SRC scheme :session 4-51 :exports none :results output silent
  (use-modules (ice-9 pretty-print))

  (add-to-load-path (dirname "./"))

  (load "./ambeval.scm")
#+END_SRC

#+BEGIN_SRC scheme :session 4-51 :exports both :results output code
  (pretty-print
   (ambeval-helper
    '(begin
       (define count 0)

       (let ((x (an-element-of '(a b c)))
             (y (an-element-of '(a b c))))
         (permanent-set! count (+ count 1))
         (require (not (eq? x y)))
         (list x y count)))))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC scheme
;;; Starting a new problem 
(a b 2)
#+END_SRC

#+BEGIN_SRC scheme :session 4-51 :exports both :results output code
  (pretty-print (try-again))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC scheme
(a c 3)
#+END_SRC

**** What values would have been displayed if we had used ~set!~ here rather than ~permanent-set!~ ?
1
