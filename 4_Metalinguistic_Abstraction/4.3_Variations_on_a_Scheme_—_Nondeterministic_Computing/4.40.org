#+Title: Exercise 4.40
 In the multiple dwelling problem, how many sets of assignments are there of people to floors, both before and after the requirement that floor assignments be distinct? It is very inefficient to generate all possible assignments of people to floors and then leave it to backtracking to eliminate them. For example, most of the restrictions depend on only one or two of the person-floor variables, and can thus be imposed before floors have been selected for all the people. Write and demonstrate a much more efficient nondeterministic procedure that solves this problem based upon generating only those possibilities that are not already ruled out by previous restrictions. (Hint: This will require a nest of `let' expressions.)


* Load the amb evaluator
#+BEGIN_SRC scheme :session 4-40 :exports none :results output silent
  (add-to-load-path (dirname "./"))

  (load "./ambeval.scm")
#+END_SRC

* The book version 
#+BEGIN_SRC scheme :session 4-40 :exports both
  (ambeval-helper
   '(define (distinct? items)
      (cond ((null? items) true)
            ((null? (cdr items)) true)
            ((member (car items) (cdr items)) false)
            (else (distinct? (cdr items)))))
   )

  (ambeval-helper
   '(define (multiple-dwelling)
      (let ((baker (amb 1 2 3 4 5))
            (cooper (amb 1 2 3 4 5))
            (fletcher (amb 1 2 3 4 5))
            (miller (amb 1 2 3 4 5))
            (smith (amb 1 2 3 4 5)))
        (require
         (distinct? (list baker cooper fletcher miller smith)))
        (require (not (= baker 5)))
        (require (not (= cooper 1)))
        (require (not (= fletcher 5)))
        (require (not (= fletcher 1)))
        (require (> miller cooper))
        (require (not (= (abs (- smith fletcher)) 1)))
        (require (not (= (abs (- fletcher cooper)) 1)))
        (list (list 'baker baker)
              (list 'cooper cooper)
              (list 'fletcher fletcher)
              (list 'miller miller)
              (list 'smith smith)))))
#+END_SRC

#+RESULTS:
: ok

* multiple-dwelling number of amb calls
#+BEGIN_SRC scheme :session 4-40 :exports both
  (ambeval-helper '(multiple-dwelling))
  amb-counter
#+END_SRC

#+RESULTS:
: 3675

* Optimized version

#+BEGIN_SRC scheme :session 4-40 :exports both
  (set! amb-counter 0)
  (ambeval-helper
   '(define (multiple-dwelling)
      (let ((baker (amb 1 2 3 4 5)))
        (require (not (= baker 5)))
        (let ((cooper (amb 1 2 3 4 5)))
          (require (distinct? (list cooper baker)))
          (let ((fletcher (amb 1 2 3 4 5)))
            (require (not (= fletcher 5)))
            (require (not (= fletcher 1)))
            (require (not (= (abs (- fletcher cooper)) 1)))
            (require (distinct? (list fletcher cooper baker)))
            (let ((miller (amb 1 2 3 4 5)))
              (require (> miller cooper))
              (require (distinct? (list miller fletcher cooper baker)))
              (let ((smith (amb 1 2 3 4 5)))
                (require
                 (distinct? (list baker cooper fletcher miller smith)))
                (require (not (= (abs (- smith fletcher)) 1)))
                (list (list 'baker baker)
                      (list 'cooper cooper)
                      (list 'fletcher fletcher)
                      (list 'miller miller)
                      (list 'smith smith)))))))))
  (ambeval-helper '(multiple-dwelling))
  amb-counter
#+END_SRC

#+RESULTS:
: 145

This version is much more efficient as compared to the version in the book. amb was called only 145 times.  
