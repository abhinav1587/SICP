#+Title: Exercise 4.2
Louis Reasoner plans to reorder the cond clauses in eval so that the clause for procedure applications appears before the clause for assignments. He argues that this will make the interpreter more efficient: Since programs usually contain more applications than assignments, definitions, and so on, his modified eval will usually check fewer clauses than the original eval before identifying the type of an expression.

**** What is wrong with Louis’s plan? (Hint: What will Louis’s evaluator do with the expression (define x 3)?)
eval will consider (define x 3) as an application and will try to evaluate operator of the expression, which is define. Since now, define alone is passed into eval, it will be considered as a variable. When lookup-variable-value tries to find define, it will complain that define is not defined.

**** Louis is upset that his plan didn’t work. He is willing to go to any lengths to make his evaluator recognize procedure applications before it checks for most other kinds of expressions. Help him by changing the syntax of the evaluated language so that procedure applications start with call. For example, instead of (factorial 3) we will now have to write (call factorial 3) and instead of (+ 1 2) we will have to write (call + 1 2).

Original procedures for applications 
#+BEGIN_SRC scheme :eval no
  (define (application? exp) (pair? exp))
  (define (operator exp) (car exp))
  (define (operands exp) (cdr exp))
  (define (no-operands? ops) (null? ops))
  (define (first-operand ops) (car ops))
  (define (rest-operands ops) (cdr ops))
#+END_SRC

Modified procedures for call syntax
#+BEGIN_SRC scheme :eval no
  (define (application? exp)
    (and (pair? exp) (eq? (car exp) 'call)))
  (define (operator exp) (cadr exp))
  (define (operands exp) (caddr exp))
  (define (no-operands? ops) (null? ops))
  (define (first-operand ops) (car ops))
  (define (rest-operands ops) (cdr ops))
#+END_SRC
