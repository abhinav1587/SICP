#+Title: Exercise 4.12

The procedures ~set-variable-value!~, ~define-variable!~, and ~lookup-variable-value~ can be expressed in terms of more abstract procedures for traversing the environment structure. Define abstractions that capture the common patterns and redefine the three procedures in terms of these abstractions.

#+BEGIN_SRC scheme :session environment-abstractions
  (define (enclosing-environment env) (cdr env))

  (define (first-frame env) (car env))

  (define the-empty-environment '())

  (define (make-frame variables values)
    (cons variables values))

  (define (frame-variables frame) (car frame))

  (define (frame-values frame) (cdr frame))

  (define (add-binding-to-frame! var val frame)
    (set-car! frame (cons var (car frame)))
    (set-cdr! frame (cons val (cdr frame))))

  (define (extend-environment vars vals base-env)
    (if (= (length vars) (length vals))
        (cons (make-frame vars vals) base-env)
        (if (< (length vars) (length vals))
            (error "Too many arguments supplied" vars vals)
            (error "Too few arguments supplied" vars vals))))

  (define (make-scan null-p eq-p var env)
    (define (scan vars vals)
      (cond ((null? vars)
             (null-p))
            ((eq? var (car vars))
             (eq-p vals))
            (else (scan (cdr vars) (cdr vals)))))
    (let ((frame (first-frame env)))
      (scan (frame-variables frame) (frame-values frame))))

  (define (lookup-variable-value var env)
    (define (env-loop env)
      (if (eq? env the-empty-environment)
          (error "Unbound variable" var)
          (make-scan
           (lambda ()
             (env-loop (enclosing-environment env)))
           (lambda (vals)
             (car vals)) var env)))
    (env-loop env))

  (define (set-variable-value! var val env)
    (define (env-loop env)
      (if (eq? env the-empty-environment)
          (error "Unbound variable -- SET!" var)
          (make-scan
           (lambda ()
             (env-loop (enclosing-environment env)))
           (lambda (vals) (set-car! vals val)) var env)))
    (env-loop env))

  (define (define-variable! var val env)
    (make-scan (lambda ()
                 (add-binding-to-frame! var val (first-frame env)))
               (lambda (vals) (set-car! vals val))
               var env))
#+END_SRC

