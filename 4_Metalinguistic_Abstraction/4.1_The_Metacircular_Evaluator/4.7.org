#+Title: Exercise 4.7
Let* is similar to let, except that the bindings of the let* variables are performed sequentially from left to right, and each binding is made in an environment in which all of the preceding bindings are visible. For example

#+BEGIN_SRC scheme :eval no
  (let* ((x 3)
         (y (+ x 2))
         (z (+ x y 5)))
    (* x z))
#+END_SRC

returns 39. 

**** Explain how a let* expression can be rewritten as a set of nested let expressions, 

Using a procedure to recursively build the subsequent variable declaration similar to how it is done for the cond expansion.

**** and write a procedure let*->nested-lets that performs this transformation. 
#+BEGIN_SRC scheme :session nested-lets :results output code :exports both
  (define (let*-expression-definitions exp)
    (cadr exp))

  (define (let*-body exp)
    (caddr exp))

  (define (let*->nested-lets exp)
    (define (build-nested-let expr-defs)
      (cond ((null? expr-defs) (let*-body exp))
            (else
             (cons
              'let
              (list (list (car expr-defs))
                    (build-nested-let (cdr expr-defs)))))))
    (build-nested-let (let*-expression-definitions exp)))

  (define test-exp
    '(let* ((x 3)
            (y (+ x 2))
            (z (+ x y 5)))
       (* x z)))

  (display (let*->nested-lets test-exp))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC scheme :exports both
(let ((x 3)) (let ((y (+ x 2))) (let ((z (+ x y 5))) (* x z))))
#+END_SRC

#+RESULTS:
: 39

**** If we have already implemented let (Exercise 4.6) and we want to extend the evaluator to handle let*, is it sufficient to add a clause to eval whose action is

~(eval (let*->nested-lets exp) env)~

or must we explicitly expand let* in terms of non-derived expressions?

It should work similar to (eval (cond-if exp) env).
