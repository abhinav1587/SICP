#+Title: Exercise 4.29

**** Exhibit a program that you would expect to run much more slowly without memoization than with memoization. 
The recursive factorial function is a good example of a function which performs poorly without memoization.

 Also, consider the following interaction, where the `id' procedure is defined as in *Note Exercise 4-27:: and `count' starts at 0:

          (define (square x)
            (* x x))

          ;;; L-Eval input:
          (square (id 10))
          ;;; L-Eval value:
          <RESPONSE>

          ;;; L-Eval input:
          count
          ;;; L-Eval value:
          <RESPONSE>

**** Give the responses both when the evaluator memoizes and when it does not.

***** Memoized version
(define (square x)
  (* x x))

;;; L-Eval input:
(square (id 10))
;;; L-Eval value:
100

;;; L-Eval input:
count
;;; L-Eval value:
1

***** Non Memoized Version
(define (square x)
  (* x x))

;;; L-Eval input:
(square (id 10))
;;; L-Eval value:
100

;;; L-Eval input:
count
;;; L-Eval value:
2

Since the argument is being lazily evaluated, it will call (id 10) twice, hence incrementing count to 2.
