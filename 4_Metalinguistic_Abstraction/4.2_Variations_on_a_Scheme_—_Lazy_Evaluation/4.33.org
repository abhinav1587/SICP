#+Title: Exercise 4.33
Ben Bitdiddle tests the lazy list implementation given above by evaluating the expression

#+BEGIN_SRC scheme :eval no
  (car '(a b c))
#+END_SRC

To his surprise, this produces an error. After some thought, he realizes that the “lists” obtained by reading in quoted expressions are different from the lists manipulated by the new definitions of cons, car, and cdr. Modify the evaluator’s treatment of quoted expressions so that quoted lists typed at the driver loop will produce true lazy lists.

#+BEGIN_SRC scheme :session 4-33 :exports none :results output silent
  (add-to-load-path (dirname "./"))

  (load "./M-Eval-Lazy.scm")
#+END_SRC

Install cons, car, cdr as user defined procedures.
See the modified quoted? in eval which allows the basic
data structure in Scheme is lazy. 
#+BEGIN_SRC scheme :session 4-33 :results output silent
  (eval '(define (cons x y) (lambda (m) (m x y))) the-global-environment)

  (eval '(define (car z) (z (lambda (p q) p))) the-global-environment)

  (eval '(define (cdr z) (z (lambda (p q) q))) the-global-environment)
#+END_SRC

