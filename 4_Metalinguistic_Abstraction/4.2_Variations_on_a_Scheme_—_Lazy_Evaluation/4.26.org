#+Title: Exercise 4.26
Ben Bitdiddle and Alyssa P. Hacker disagree over the importance of lazy evaluation for implementing things such as `unless'.

**** Ben points out that it's possible to implement `unless' in applicative order as a special form.
~unless~ could be transformed into primitive ifs.

**** Alyssa counters that, if one did that, `unless' would be merely syntax, not a procedure that could be used in conjunction with higher-order procedures.
If for instance, unless needs to be used in a map procedure, 
#+BEGIN_SRC scheme :eval no
  (map unless conditionals usuals exceptionals)
#+END_SRC
when the evaluator looks up unless, it will throw an error.

**** Fill in the details on both sides of the argument.

**** Show how to implement `unless' as a derived expression (like `cond' or `let'), 

#+BEGIN_SRC scheme :eval no
  (define (unless->if exp)
    (make-if (predicate exp) (consequent exp) (alternative exp)))
#+END_SRC

**** and give an example of a situation where it might be useful to have `unless' available as a procedure, rather than as a special form.
An example is listed in Alyssa's argument.
