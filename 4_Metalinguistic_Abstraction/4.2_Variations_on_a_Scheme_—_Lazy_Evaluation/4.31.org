#+Title: Exercise 4.31

#+BEGIN_SRC scheme :session 4-31 :exports none :results output silent
  (use-modules (statprof))

  (add-to-load-path (dirname "./"))

  (load "./M-Eval-Lazy-Compatible-Extension.scm")
#+END_SRC

See M-Eval-Lazy-Compatible-Extension.scm for the implementation.

* Lazy

#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(define x 0) the-global-environment)
  (eval 'x the-global-environment)
#+END_SRC

#+RESULTS:
: 0

Use an increment function to test if an argument
is lazy.
If the argument is lazy, inc-x should not increment the value of x. Otherwise, it should increment the value of x.
#+BEGIN_SRC scheme :session 4-31 :results output silent
  (eval '(define (inc-x n)
           (set! x (+ x n))
           x)
        the-global-environment)
#+END_SRC

Define a function taking a non-lazy argument. It should evaluate its argument even though the function it returns is not evaluated.
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(define (f a)
           (lambda () (+ 0 a))) the-global-environment)

  (eval '(f (inc-x 1)) the-global-environment)

  (eval 'x the-global-environment)
#+END_SRC

#+RESULTS:
: 1

Define function g having a lazy parameter. In this case,
x should not be incremented since the argument is lazy.
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(define (g (a lazy))
           (lambda () (+ 0 a))) the-global-environment)

  (eval '(g (inc-x 1)) the-global-environment)

  (eval 'x the-global-environment)
#+END_SRC

#+RESULTS:
: 1

Eval f again to test
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(f (inc-x 1)) the-global-environment)

  (eval 'x the-global-environment)
#+END_SRC

#+RESULTS:
: 2


Eval g, but now force the evaluation of the returning procedure
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '((g (inc-x 1))) the-global-environment)

  (eval 'x the-global-environment)
#+END_SRC

#+RESULTS:
: 3


* Lazy Memo

To test Lazy Memo, we would need an expression passed in as an argument to be evaluated repeatedly a few times.

Non memoized arguments should take longer to evaluate compared to memoized arguments.

** Non memoized test
*** Define the Fibonacci procedure
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(define (fib n)
           (cond ((= n 0) 1)
                 ((= n 1) 1)
                 (else (+
                        (fib (- n 1))
                        (fib (- n 2))))))
        the-global-environment)
#+END_SRC

#+RESULTS:
: ok

Define a procedure to add fib of n 6 times with a lazy parameter
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(define (f (g lazy)) (+ 0 g g g g g g)) the-global-environment)
#+END_SRC

#+RESULTS:
: ok

 Time the execution

#+BEGIN_SRC scheme :session 4-31 :results replace output raw :exports both
  (statprof
   (lambda ()
     (eval '(f (fib 22)) the-global-environment)))
#+END_SRC

#+RESULTS:
: Total time: 4.566791 seconds (0.243686 seconds in GC)

** Memoized Test
Define a procedure to add fib of n 6 times with a lazy memo parameter
#+BEGIN_SRC scheme :session 4-31 :exports both
  (eval '(define (f-m (g lazy-memo)) (+ 0 g g g g g g)) the-global-environment)
#+END_SRC

#+RESULTS:
: ok

Time the execution
#+BEGIN_SRC scheme :session 4-31 :results replace output raw :exports both
  (statprof
   (lambda ()
     (eval '(f-m (fib 22)) the-global-environment)))
#+END_SRC

#+RESULTS:
: Total time: 0.753589 seconds (0.042601 seconds in GC)


** Results analysis
It can be seen that the non memoized version takes roughly 6 times longer to complete the execution, which shows that the new syntax is working.
