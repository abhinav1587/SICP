#+Title: Exercise 5.8

The following register-machine code is ambiguous, because the label ~here~ is defined more than once:

#+BEGIN_SRC scheme :eval no
  start
    (goto (label here))
  here
    (assign a (const 3))
    (goto (label there))
  here
    (assign a (const 4))
    (goto (label there))
  there
#+END_SRC

**** With the simulator as written, what will the contents of register ~a~ be when control reaches ~there~? 
It will be 3.

From make-goto, it uses lookup-label, which in turn uses assoc to do the actual lookup.
In the Guile Scheme implementation, assoc fetches the first occurence of the key and returns the value.

**** Modify the ~extract-labels~ procedure so that the assembler will signal an error if the same label name is used to indicate two different locations.

I'm not sure when to test this out since I haven't yet implemented the machine simulator.

Update: It turns out that I had the other version of the extract-labels before, which is not compatible with what I have in machine. Updated the extract-labels to use continuations as the original version in the book, added the error for duplicate labels and it looks good. I can't get it show up nicely in org mode's result block though.

#+BEGIN_SRC scheme :session 5-8 :exports none :results output silent
  (add-to-load-path (dirname "./"))

  (load "./machine.scm")
#+END_SRC


#+BEGIN_SRC scheme :session 5-8 :exports both
  (define (extract-labels text receive)
    (if (null? text)
        (receive '() '())
        (extract-labels
         (cdr text)
         (lambda (insts labels)
           (let ((next-inst (car text)))
             (if (symbol? next-inst)
                 (if (assoc next-inst labels)
                     (error "Duplicate label -- ASSEMBLE" next-inst)
                  (receive
                      insts
                      (cons (make-label-entry next-inst insts) labels)))
                 (receive
                     (cons (make-instruction next-inst) insts)
                     labels)))))))

  (define gcd-machine
    (make-machine
     '(a b t)
     (list (list 'rem remainder) (list '= =))
     '(test-b
       (test (op =) (reg b) (const 0))
       (branch (label gcd-done))
       (assign t (op rem) (reg a) (reg b))
       (assign a (reg b))
       (assign b (reg t))
       test-b
       (goto (label test-b))
       gcd-done)))
#+END_SRC

#+RESULTS:
: Duplicate label -- ASSEMBLE test-b
