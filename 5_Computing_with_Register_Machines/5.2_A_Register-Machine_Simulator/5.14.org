#+Title: Exercise 5.14

Measure the number of pushes and the maximum stack depth required to compute n! for various small values of n using the factorial machine shown in *Note Figure 5-11::. From your data determine formulas in terms of n for the total number of push operations and the maximum stack depth used in computing n! for any n > 1. Note that each of these is a linear function of n and is thus determined by two constants. In order to get the statistics printed, you will have to augment the factorial machine with instructions to initialize the stack and print the statistics. You may want to also modify the machine so that it repeatedly reads a value for n, computes the factorial, and prints the result (as we did for the GCD machine in *Note Figure 5-4::), so that you will not have to repeatedly invoke
`get-register-contents', `set-register-contents!', and `start'.

**** The fact machine

#+BEGIN_SRC scheme :session 5-14 :exports both
  (add-to-load-path (dirname "./"))
  (load "./machine.scm")

  (define fact
    (make-machine
     '()
     (list
      (list '= =)
      (list '- -)
      (list '* *))
     '((assign continue (label fact-done))
       fact-loop
       (test (op =) (reg n) (const 1))
       (branch (label base-case))
       (save continue)
       (save n)
       (assign n (op -) (reg n) (const 1))
       (assign continue (label after-fact))
       (goto (label fact-loop))
       after-fact
       (restore n)
       (restore continue)
       (assign val (op *) (reg n) (reg val))
       (goto (reg continue))
       base-case
       (assign val (const 1))
       (goto (reg continue))
       fact-done)))

  (set-register-contents! fact 'n 3)
  (start fact)
  (get-register-contents fact 'val)
#+END_SRC

#+RESULTS:
: 6

**** Statistics for n = 3
#+BEGIN_SRC scheme :session 5-14 :exports both :results output verbatim
  (((cadr (assoc 'print-stack-statistics (fact 'operations)))))
#+END_SRC

#+RESULTS:
: n
: (total-pushes = 2 maximum-depth = 2)
: continue
: (total-pushes = 2 maximum-depth = 2)
: flag
: (total-pushes = 0 maximum-depth = 0)
: pc
: (total-pushes = 0 maximum-depth = 0)

**** Statistics for n = 4
#+BEGIN_SRC scheme :session 5-14 :exports both :results output verbatim
  ((cadr (assoc 'initialize-stack (fact 'operations))))
  (set-register-contents! fact 'n 4)
  (start fact)
  (get-register-contents fact 'val)
  (((cadr (assoc 'print-stack-statistics (fact 'operations)))))
#+END_SRC

#+RESULTS:
#+begin_example
val
(total-pushes = 0 maximum-depth = 0)
n
(total-pushes = 3 maximum-depth = 3)
continue
(total-pushes = 3 maximum-depth = 3)
flag
(total-pushes = 0 maximum-depth = 0)
pc
(total-pushes = 0 maximum-depth = 0)
#+end_example

**** Statistics for n = 5
#+BEGIN_SRC scheme :session 5-14 :exports both :results output verbatim
  ((cadr (assoc 'initialize-stack (fact 'operations))))
  (set-register-contents! fact 'n 5)
  (start fact)
  (get-register-contents fact 'val)
  (((cadr (assoc 'print-stack-statistics (fact 'operations)))))
#+END_SRC

#+RESULTS:
#+begin_example
val
(total-pushes = 0 maximum-depth = 0)
n
(total-pushes = 4 maximum-depth = 4)
continue
(total-pushes = 4 maximum-depth = 4)
flag
(total-pushes = 0 maximum-depth = 0)
pc
(total-pushes = 0 maximum-depth = 0)
#+end_example

**** Formula
We can see that the total number of pushes and maximum depth for n is n - 1 from the results above.

Since this version of machine uses the stack table, it separates each register to its own stack. The results would have been different if a single stack was used.
