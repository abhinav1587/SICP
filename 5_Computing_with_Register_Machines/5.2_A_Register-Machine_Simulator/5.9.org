#+Title: Exercise 5.9
The treatment of machine operations above permits them to operate on labels as well as on constants and the contents of registers. Modify the expression-processing procedures to enforce the condition that operations can be used only with registers and constants.

#+BEGIN_SRC scheme :eval no
  (define (make-operation-exp exp machine labels operations)
    (let ((op (lookup-prim (operation-exp-op exp) operations))
          (aprocs
           (map (lambda (e)
                  (if (not (label-exp? e))
                      (make-primitive-exp e machine labels)
                      (error "Cannot apply operation on label -- ASSEMBLE" (cadr e))))
                (operation-exp-operands exp))))
      (lambda ()
        (apply op (map (lambda (p) (p)) aprocs)))))
#+END_SRC

Tested in machine with these two inputs and behaving as expected. I'm not running them through org-babel since the error output are not being captured.

#+BEGIN_SRC scheme :eval no
  (define gcd-machine
    (make-machine
     '(a b t)
     (list (list 'rem remainder) (list '= =))
     '(test-b
       (test (op =) (reg b) (label gcd-done))
       (branch (label gcd-done))
       (assign t (op rem) (reg a) (reg b))
       (assign a (reg b))
       (assign b (reg t))
       (goto (label test-b))
       gcd-done)))
#+END_SRC

#+BEGIN_SRC scheme :eval no
  (define gcd-machine
    (make-machine
     '(a b t)
     (list (list 'rem remainder) (list '= =))
     '(test-b
       (test (op =) (label gcd-done) (const 0))
       (branch (label gcd-done))
       (assign t (op rem) (reg a) (reg b))
       (assign a (reg b))
       (assign b (reg t))
       (goto (label test-b))
       gcd-done)))
#+END_SRC
