#+Title: Exercise 5.4

Specify register machines that implement each of the following procedures. For each machine, write a controller instruction sequence and draw a diagram showing the data paths.

*  a. Recursive exponentiation:
#+BEGIN_SRC scheme :eval no
  (define (expt b n)
    (if (= n 0)
        1
        (* b (expt b (- n 1)))))

#+END_SRC

** Controller
#+BEGIN_SRC scheme :eval no
  (controller
   (assign continuer (label expt-done))

   expt-loop
   (test (op =) (reg n) (const 0))
   (branch (label base-case))
   (save continue)
   (save n)
   (assign n (op -) (reg n) (const 1))
   (assign continue (label after-expt))
   (goto (label expt-loop))

   after-expt
   (restore continue)
   (restore n)
   (assign val (op *) (reg b) (reg val))
   (goto (reg continue))

   base-case
   (assign val (const 1))
   (goto (reg continue))
   expt-done)
#+END_SRC

** data-path
[[./images/5.4/5.4a.svg]]
*  b. Iterative exponentiation:
#+BEGIN_SRC scheme :eval no
  (define (expt b n)
    (define (expt-iter counter product)
      (if (= counter 0)
          product
          (expt-iter (- counter 1) (* b product))))
    (expt-iter n 1))
#+END_SRC

** Controller
#+BEGIN_SRC scheme :eval no
  (controller
   (assign product (const 1))
   (assign counter (reg n))

   exp-iter
   (test (op =) (reg counter) (const 0))
   (branch expt-done)
   (assign counter (op -) (reg counter) (const 1))
   (assign product (op *) (reg b) (reg product))
   (goto (label expt-iter))

   expt-done
   )
#+END_SRC

** data-path
[[./images/5.4/5.4b.svg]]
