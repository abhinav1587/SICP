#+Title: Exercise 3.54
 Define a procedure mul-streams, analogous to add-streams, that produces the elementwise product of its two input streams. Use this together with the stream of integers to complete the following definition of the stream whose nth element (counting from 0) is n + 1 factorial:

#+BEGIN_SRC scheme :eval no
  (define factorials 
    (cons-stream 1 (mul-streams ⟨??⟩ ⟨??⟩)))
#+END_SRC

Load the stream module.
#+BEGIN_SRC scheme :session mul-streams :results output silent
  (add-to-load-path (dirname "./"))

  (use-modules (custom-module stream))
#+END_SRC

#+INCLUDE: ./custom-module/stream.scm

#+BEGIN_SRC scheme :session mul-streams :results output silent
  (define (mul-streams s1 s2)
    (stream-map * s1 s2))

  (define factorial
    (cons-stream 1 (mul-streams factorial integers)))
#+END_SRC

* Tests

#+BEGIN_SRC scheme :session mul-streams :exports both
  (stream-ref factorial 6)
#+END_SRC

#+RESULTS:
: 720

