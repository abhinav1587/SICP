#+Title: Exercise 3.55
Define a procedure partial-sums that takes as argument a stream S and returns the stream whose elements are S0, S0 + S1, S0 + S1 + S2, … . For example, (partial-sums integers) should be the stream 1, 3, 6, 10, 15, ….

Load the stream module.
#+BEGIN_SRC scheme :session partial-sums :results output silent
  (add-to-load-path (dirname "./"))

  (use-modules (custom-module stream))
#+END_SRC

* partial-sums
#+BEGIN_SRC scheme :session partial-sums :results output silent
  (define (partial-sums stream)
    (cons-stream
     0
     (add-streams
      (partial-sums stream)
      stream)))
#+END_SRC

* Tests
#+BEGIN_SRC scheme :session partial-sums :exports both
  (map (lambda (x)
         (stream-ref (partial-sums integers) x))
       '(0 1 2 3 4 5))
#+END_SRC

#+RESULTS:
| 0 | 1 | 3 | 6 | 10 | 15 |

#+BEGIN_SRC scheme :session partial-sums :exports both
  (define (mul-streams s1 s2)
    (stream-map * s1 s2))

  (define factorial
    (cons-stream 1 (mul-streams factorial integers)))

  (map (lambda (x)
         (stream-ref factorial x))
       '(0 1 2 3 4 5 6 7 8 9))
#+END_SRC

#+RESULTS:
| 1 | 1 | 2 | 6 | 24 | 120 | 720 | 5040 | 40320 | 362880 |

#+BEGIN_SRC scheme :session partial-sums :exports both

  (map (lambda (x)
         (stream-ref (partial-sums factorial) x))
       '(0 1 2 3 4 5 6 7 8 9))
#+END_SRC

#+RESULTS:
| 0 | 1 | 2 | 4 | 10 | 34 | 154 | 874 | 5914 | 46234 |
