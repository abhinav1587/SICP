#+Title: Exercise 3.65
Use the series
ln2 = 1− 1/2 + 1/3 − 1/4 + …
to compute three sequences of approximations to the natural logarithm of 2, in the same way we did above for π. How rapidly do these sequences converge?

* Module Loading
#+BEGIN_SRC scheme :session ln :results output silent
  (add-to-load-path (dirname "./"))

  (use-modules (custom-module stream))
#+END_SRC


* Natural Logarithm
#+BEGIN_SRC scheme :session ln
  (define (ln2-summands n)
    (cons-stream
     (/ 1.0 n)
     (stream-map - (ln2-summands (+ n 1)))))

  (define ln2-stream (partial-sums (ln2-summands 1)))
#+END_SRC

#+RESULTS:

* Test ln2 stream
#+BEGIN_SRC scheme :session ln :exports both
  (map (lambda (x) (stream-ref ln2-stream x)) '(0 1 2 3))
#+END_SRC

#+RESULTS:
| 1.0 | 0.5 | 0.8333333333333333 | 0.5833333333333333 |


* Test accelerated sequence of ln2
#+BEGIN_SRC scheme :session ln :exports both
  (map (lambda (x)
         (stream-ref
          (accelerated-sequence euler-transform ln2-stream) x))
       '(0 1 2))
#+END_SRC

#+RESULTS:
| 1.0 | 0.7 | 0.6932773109243697 |

* Comparison of iterations required for non-accelerated version
#+BEGIN_SRC scheme :session ln :exports both
  (map (lambda (x) (stream-ref ln2-stream x)) '(2000))
#+END_SRC

#+RESULTS:
| 0.6933969931848778 |

With 2000 iterations for the non-accelerated version, it is still not close to 3 iterations of the accelerated version.

* Max precision
#+BEGIN_SRC scheme :session ln :exports both
  (stream-ref
   (accelerated-sequence euler-transform ln2-stream) 9)
#+END_SRC

#+RESULTS:
: 0.6931471805599454

The 10th iteration results in nan
