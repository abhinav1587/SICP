#+BEGIN_SRC scheme :session 3-72 :exports none
  (add-to-load-path (dirname "./"))

  (use-modules (custom-module stream))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC scheme :session 3-72 :exports both
  (define (square x)
    (* x x))

  (define (weight pair)
    (let ((i (car pair))
          (j (cadr pair)))
      (+ (square i) (square j))))

  (define (filter-duplicate-weight stream)
    (let ((first (stream-car stream))
          (second (stream-car (stream-cdr stream)))
          (third (stream-car (stream-cdr (stream-cdr stream)))))
     (cond ((stream-null? stream)
            the-empty-stream)
           (
            (= (weight first)
               (weight second)
               (weight third))
            (cons-stream
             (list
              first
              second
              third
              (weight (stream-car stream)))
             (filter-duplicate-weight (stream-cdr stream))))
           (else (filter-duplicate-weight
                  (stream-cdr stream))))))

  (append '(("*#*" *First* *Second* *Third* *Weight*))
          (map (lambda (x)
                     (cons x (stream-ref
                       (filter-duplicate-weight
                        (pairs-ordered integers integers weight)) x)))
                   '(0 1 2 3 4)))
#+END_SRC

#+RESULTS:
| *#* | *First* | *Second* | *Third* | *Weight* |
|   0 | (1 18)  | (6 17)   | (10 15) |      325 |
|   1 | (5 20)  | (8 19)   | (13 16) |      425 |
|   2 | (5 25)  | (11 23)  | (17 19) |      650 |
|   3 | (7 26)  | (10 25)  | (14 23) |      725 |
|   4 | (2 29)  | (13 26)  | (19 22) |      845 |
