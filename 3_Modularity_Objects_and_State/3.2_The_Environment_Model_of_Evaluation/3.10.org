#+TITLE: Exercise 3.10
In the make-withdraw procedure, the local variable balance is created as a parameter of make-withdraw. We could also create the local state variable explicitly, using let, as follows:

#+BEGIN_SRC scheme :eval no
(define (make-withdraw initial-amount)
  (let ((balance initial-amount))
    (lambda (amount)
      (if (>= balance amount)
          (begin (set! balance 
                       (- balance amount))
                 balance)
          "Insufficient funds"))))
#+END_SRC

Recall from 1.3.2 that let is simply syntactic sugar for a procedure call:

~(let ((⟨var⟩ ⟨exp⟩)) ⟨body⟩)~
is interpreted as an alternate syntax for

~((lambda (⟨var⟩) ⟨body⟩) ⟨exp⟩)~

Use the environment model to analyze this alternate version of make-withdraw, drawing figures like the ones above to illustrate the interactions

#+BEGIN_SRC scheme :eval no
(define W1 (make-withdraw 100))
(W1 50)
(define W2 (make-withdraw 100))
#+END_SRC

Show that the two versions of make-withdraw create objects with the same behavior. How do the environment structures differ for the two versions?

* Solution
The procedure can be re-written as
#+BEGIN_SRC scheme :eval no
  (define (make-withdraw initial-amount)
    ((lambda (balance)
       (lambda (amount)
         (if (>= balance amount)
             (begin (set! balance 
                          (- balance amount))
                    balance)
             "Insufficient funds"))) initial-amount))
#+END_SRC

** (define W1 (make-withdraw 100))
[[./images/3.10/define-W1.svg]]

** (W1 50)
[[./images/3.10/W1-50.svg]]

** (define W2 (make-withdraw 100))
[[./images/3.10/define-W2.svg]]

From the illustrations above, it can be seen that the behavior of the procedures are the same as the first version. However, the environments created during the procedure calls are different. Since the make-withdraw procedure contains the lambda balance procedure which is applied to the initial-amount variable, it creates an environment to hold the value of balance in addition to that of initial-amount.
