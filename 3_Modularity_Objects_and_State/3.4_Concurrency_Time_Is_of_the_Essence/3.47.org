#+Title: Exercise 3.47
A semaphore (of size n) is a generalization of a mutex. Like a mutex, a semaphore supports acquire and release operations, but it is more general in that up to n processes can acquire it concurrently. Additional processes that attempt to acquire the semaphore must wait for release operations. Give implementations of semaphores

**** 1. in terms of mutexes
#+BEGIN_SRC scheme
  (define (semaphore n)
    (let ((mutex-list (map (lambda (x)
                             x ; ignore argument
                             (make-mutex)) (range n)))
          (assign-mutex -1))

      (define (increment-mutex)
        (if (= assign-mutex n)
            (set! assign-mutex 0)
            (set! assign-mutex (+ 1 assign-mutex))))

      (define (semaphore-acquire)
        (increment-mutex)
        (let ((mutex (list-ref mutex-list assign-mutex)))
          (lambda (p)
            (define (serialized-p . args)
              (mutex 'acquire)
              (let ((val (apply p args)))
                (mutex 'release)
                val))
            serialized-p)))

      (lambda ()
        (semaphore-acquire))))
#+END_SRC

**** 2. in terms of atomic test-and-set! operations.
