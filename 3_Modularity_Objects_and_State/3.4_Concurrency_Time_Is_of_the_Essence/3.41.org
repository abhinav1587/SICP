#+Title: Exercise 3.41
Ben Bitdiddle worries that it would be better to implement the bank account as follows (where the commented line has been changed):

#+BEGIN_SRC scheme :eval no
(define (make-account balance)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin 
          (set! balance 
                (- balance amount))
          balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((protected (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) 
             (protected withdraw))
            ((eq? m 'deposit) 
             (protected deposit))
            ((eq? m 'balance)
             ((protected 
                (lambda () 
                  balance)))) ; serialized
            (else 
             (error 
              "Unknown request: 
               MAKE-ACCOUNT"
              m))))
    dispatch))
#+END_SRC

because allowing unserialized access to the bank balance can result in anomalous behavior. 
**** Do you agree? 
No. The two other procedures accessing balance are serialized, which means that balance is guaranteed to have a correct value. If there is only a read operation done on balance, without updating it, this can be unserialized, since it's not affecting its value in the process.
**** Is there any scenario that demonstrates Benâ€™s concern?
I cannot think of any.
