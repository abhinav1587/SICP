#+Title: Exercise 3.32
The procedures to be run during each time segment of the agenda are kept in a queue. Thus, the procedures for each segment are called in the order in which they were added to the agenda (first in, first out). Explain why this order must be used. In particular, trace the behavior of an and-gate whose inputs change from 0, 1 to 1, 0 in the same segment and say how the behavior would differ if we stored a segmentâ€™s procedures in an ordinary list, adding and removing procedures only at the front (last in, first out).

* Solution
** Queue
#+BEGIN_SRC scheme :session digital-circuit 
  (define (make-queue) (cons '() '()))

  (define (empty-queue? queue) 
    (null? (front-ptr queue)))

  (define (front-ptr queue) (car queue))

  (define (rear-ptr queue) (cdr queue))

  (define (set-front-ptr! queue item) 
    (set-car! queue item))

  (define (set-rear-ptr! queue item) 
    (set-cdr! queue item))

  (define (insert-queue! queue item)
    (let ((new-pair (cons item '())))
      (cond ((empty-queue? queue)
             (set-front-ptr! queue new-pair)
             (set-rear-ptr! queue new-pair)
             queue)
            (else (set-cdr! (rear-ptr queue) 
                            new-pair)
                  (set-rear-ptr! queue new-pair)
                  queue))))

  (define (delete-queue! queue)
    (cond ((empty-queue? queue)
           (error "DELETE! called with 
                   an empty queue" queue))
          (else (set-front-ptr! 
                 queue 
                 (cdr (front-ptr queue)))
                queue)))

  (define (front-queue queue)
    (if (empty-queue? queue)
        (error "FRONT called with an 
                empty queue" queue)
        (car (front-ptr queue))))
#+END_SRC

#+RESULTS:

** Last in, first out
#+BEGIN_SRC scheme :session digital-circuit :eval no
  (define (make-queue) (cons '() '()))

  (define (insert-queue! queue item)
    (cond ((null? (car queue))
           (set-car! queue item))
          (else
           (let ((rest (cons (car queue) (cdr queue))))
             (set-car! queue item)
             (set-cdr! queue rest)
             ))))

  (define (empty-queue? queue)
    (or (null? queue) (null? (car queue))))

  (define (delete-queue! queue)
    (if (null? (cdr queue))
        (set-car! queue '())
     (when (not (empty-queue? queue))
       (let ((rest (cdr queue)))
         (set-car! queue (car rest))
         (set-cdr! queue (cdr rest))))))

  (define (front-queue queue)
    (car queue))

  (define q (make-queue))

  (insert-queue! q 'a)
  (insert-queue! q 'b)
  (insert-queue! q 'c)

  q

  (delete-queue! q)

#+END_SRC

#+RESULTS:

** Agenda
#+BEGIN_SRC scheme :session digital-circuit

  (define (make-time-segment time queue)
    (cons time queue))

  (define (segment-time s) (car s))

  (define (segment-queue s) (cdr s))

  (define (make-agenda) (list 0))

  (define (current-time agenda) (car agenda))

  (define (set-current-time! agenda time)
    (set-car! agenda time))

  (define (segments agenda) (cdr agenda))

  (define (set-segments! agenda segments)
    (set-cdr! agenda segments))

  (define (first-segment agenda) 
    (car (segments agenda)))

  (define (rest-segments agenda) 
    (cdr (segments agenda)))

  (define (empty-agenda? agenda)
    (null? (segments agenda)))

  (define the-agenda (make-agenda))

  (define (add-to-agenda! time action agenda)
    (define (belongs-before? segments)
      (or (null? segments)
          (< time 
             (segment-time (car segments)))))
    (define (make-new-time-segment time action)
      (let ((q (make-queue)))
        (insert-queue! q action)
        (make-time-segment time q)))
    (define (add-to-segments! segments)
      (if (= (segment-time (car segments)) time)
          (insert-queue! 
           (segment-queue (car segments))
           action)
          (let ((rest (cdr segments)))
            (if (belongs-before? rest)
                (set-cdr!
                 segments
                 (cons (make-new-time-segment 
                        time 
                        action)
                       (cdr segments)))
                (add-to-segments! rest)))))
    (let ((segments (segments agenda)))
      (if (belongs-before? segments)
          (set-segments!
           agenda
           (cons (make-new-time-segment 
                  time 
                  action)
                 segments))
          (add-to-segments! segments))))

  (define (remove-first-agenda-item! agenda)
    (let ((q (segment-queue 
              (first-segment agenda))))
      (delete-queue! q)
      (if (empty-queue? q)
          (set-segments! 
           agenda 
           (rest-segments agenda)))))

  (define (first-agenda-item agenda)
    (if (empty-agenda? agenda)
        (error "Agenda is empty: 
                FIRST-AGENDA-ITEM")
        (let ((first-seg 
               (first-segment agenda)))
          (set-current-time! 
           agenda 
           (segment-time first-seg))
          (front-queue 
           (segment-queue first-seg)))))

#+END_SRC

#+RESULTS:

** Digital Circuit
#+BEGIN_SRC scheme :session digital-circuit 
  (define (get-signal wire)
    (wire 'get-signal))

  (define (set-signal! wire new-value)
    ((wire 'set-signal!) new-value))

  (define (add-action! wire action-procedure)
    ((wire 'add-action!) action-procedure))


  (define (after-delay delay action)
    (add-to-agenda! 
     (+ delay (current-time the-agenda))
     action
     the-agenda))

  (define (call-each procedures)
    (if (null? procedures)
        'done
        (begin ((car procedures))
               (call-each (cdr procedures)))))

  (define (make-wire)
    (let ((signal-value 0) 
          (action-procedures '()))
      (define (set-my-signal! new-value)
        (if (not (= signal-value new-value))
            (begin (set! signal-value new-value)
                   (call-each 
                    action-procedures))
            'done))
      (define (accept-action-procedure! proc)
        (set! action-procedures 
              (cons proc action-procedures))
        (proc))
      (define (dispatch m)
        (cond ((eq? m 'get-signal) 
               signal-value)
              ((eq? m 'set-signal!) 
               set-my-signal!)
              ((eq? m 'add-action!) 
               accept-action-procedure!)
              (else (error "Unknown operation: 
                            WIRE" m))))
      dispatch))
#+END_SRC

#+RESULTS:

*** Converters
#+BEGIN_SRC scheme :session digital-circuit 
  (define (boolean->digital v)
    (cond ((eq? v #f) 0)
          ((eq? v #t) 1)
          (else (error "Unknown value boolean->digital " v))))

  (define (digital->boolean v)
    (cond ((eq? v 0) #f)
          ((eq? v 1) #t)
          (else (error "Unknown value digital->boolean " v))))
#+END_SRC

#+RESULTS:

*** Gates
#+BEGIN_SRC scheme :session digital-circuit 
  (define inverter-delay 2)

  (define and-gate-delay 3)

  (define or-gate-delay 5)

  (define (logical-or s1 s2)
    (boolean->digital (or
                       (digital->boolean s1)
                       (digital->boolean s2))))

  (define (logical-and s1 s2)
    (boolean->digital (and (digital->boolean s1)
                           (digital->boolean s2))))

  (define (or-gate a1 a2 output)
    (define (or-action-procedure)
      (let ((new-value
             (logical-or (get-signal a1) 
                          (get-signal a2))))
        (after-delay 
         or-gate-delay
         (lambda ()
           (set-signal! output new-value)))))
    (add-action! a1 or-action-procedure)
    (add-action! a2 or-action-procedure)
    'ok)

  (define (and-gate a1 a2 output)
    (define (and-action-procedure)
      (let ((new-value
             (logical-and (get-signal a1) 
                          (get-signal a2))))
        (after-delay 
         and-gate-delay
         (lambda ()
           (set-signal! output new-value)))))
    (add-action! a1 and-action-procedure)
    (add-action! a2 and-action-procedure)
    'ok)

  (define (inverter input output)
    (define (invert-input)
      (let ((new-value 
             (logical-not (get-signal input))))
        (after-delay 
         inverter-delay
         (lambda ()
           (set-signal! output new-value)))))
    (add-action! input invert-input)
    'ok)

  (define (logical-not s)
    (cond ((= s 0) 1)
          ((= s 1) 0)
          (else (error "Invalid signal" s))))

#+END_SRC

#+RESULTS:

*** Adders and utils
#+BEGIN_SRC scheme :session digital-circuit 
    (define (propagate)
      (if (empty-agenda? the-agenda)
          'done
          (let ((first-item 
                 (first-agenda-item the-agenda)))
            (first-item)
            (remove-first-agenda-item! the-agenda)
            (propagate))))

    (define (half-adder a b s c)
      (let ((d (make-wire)) (e (make-wire)))
        (or-gate a b d)
        (and-gate a b c)
        (inverter c e)
        (and-gate d e s)
        'ok))

  (define (probe name wire)
    (add-action! 
     wire
     (lambda ()
       (newline)
       (display name)
       (display " ")
       (display (current-time the-agenda))
       (display "  New-value = ")
       (display (get-signal wire)))))
#+END_SRC

#+RESULTS:

** Tests
#+BEGIN_SRC scheme :session digital-circuit :eval no
  (define input-1 (make-wire))
  (define input-2 (make-wire))
  (define sum (make-wire))
  (define carry (make-wire))

  (probe 'sum sum)
  (probe 'carry carry)

  (half-adder input-1 input-2 sum carry)
  (set-signal! input-1 1)

  (propagate)
#+END_SRC

#+RESULTS:
: sum 5  New-value = 1$5 = done

** AND Gate Tests - FIFO
#+BEGIN_SRC scheme :session digital-circuit :eval no :exports both
  (define input1 (make-wire))

  (define input2 (make-wire))

  (define output (make-wire))

  (probe 'input1 input1)
  (probe 'input2 input2) 
  (probe 'output output)

  (and-gate input1 input2 output)

  (set-signal! input1 0)
  (set-signal! input2 1)

  (propagate)

#+END_SRC

#+RESULTS:
: input1 0  New-value = 0
: input2 0  New-value = 0
: output 0  New-value = 0$2 = ok
: $3 = done
: 
: input2 0  New-value = 1$4 = done
: $5 = done

#+BEGIN_SRC scheme :eval no :exports both
  (set-signal! input1 1)
  (set-signal! input2 0)
  (propagate)
#+END_SRC

#+RESULTS:
: input1 3  New-value = 1$9 = done
: 
: input2 3  New-value = 0$10 = done
: 
: output 6  New-value = 1
: output 6  New-value = 0$11 = done

Here, we don't see the output results after the signal changes since it does not change. It only gets printed when the signal changes.

** AND Gate Tests - LIFO
#+BEGIN_SRC scheme :session digital-circuit :eval no :exports both
  (define input1 (make-wire))

  (define input2 (make-wire))

  (define output (make-wire))

  (probe 'input1 input1)
  (probe 'input2 input2)
  (probe 'output output)

  (and-gate input1 input2 output)

  (set-signal! input1 0)
  (set-signal! input2 1)

  (propagate)

#+END_SRC

#+RESULTS:
: input1 0  New-value = 0
: input2 0  New-value = 0
: output 0  New-value = 0$2 = ok
: $3 = done
: 
: input2 0  New-value = 1$4 = done
: $5 = done

#+BEGIN_SRC scheme :eval no :exports both
  (set-signal! input1 1)
  (set-signal! input2 0)
  (propagate)
#+END_SRC

#+RESULTS:
: input1 3  New-value = 1$6 = done
: 
: input2 3  New-value = 0$7 = done
: 
: output 6  New-value = 1$8 = done

** Explanation
*** FIFO
While changing from 0,1 to 1,0 the AND gate's output momentarily switches from 0 to 1 and back to 0 using the normal FIFO.

*** LIFO
The behaviour of LIFO is not obvious. To be able to understand this, we would have to study the ~and-gate~ procedure more closely.
Notice that there is a call to ~after-delay~ in the procedure which queues the execution of the set-signal procedure. On the other hand, the new-value in the let part is evaluated right away.

This observation will be used to describe the output of the AND gate after the value of a1 and a2 changes from 0,1 to 1,0.

1. When a1 is set to 1, the set-signal procedure is called, then the new-value of the output is calculated immediately, which is the logical and of a1 and a2 where a1 was recently changed from 0 to 1 and a2 is still on 1 resulting in 1. But this value is not set to the output yet, since it gets queued by the after-delay procedure which will be called by propagate.

2. When a2 is then set to 0, it goes through the same steps described in the previous paragraph, where the new-value results in 0, since a1 is 0 and a2 recently changed to 0.

Since we are using a LIFO queue, step 1 goes first, then step 2 goes on top of it. The first one to get executed is step 2. Taking this into consideration, when propagate is executed, it goes through the agenda, then picks the procedure in after-delay from step 2, calls it, and this is when the set-signal! procedure to set the output of the AND gate occurs, which in this case is 0.

Then continuing through the queue after step 2 is step 1. As described above, for step 1, the output will then be set to 1.

In summary, the output value is evaluated at the time the input signal changes, but is actually set when propagate runs through the agenda, which in the case of LIFO, is in the reverse order.
