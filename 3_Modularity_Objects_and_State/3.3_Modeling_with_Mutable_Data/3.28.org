#+Title: Exercise 3.28
 Define an or-gate as a primitive function box. Your or-gate constructor should be similar to and-gate.

* Solution

#+BEGIN_SRC scheme :eval no
  (define (boolean->digital v)
    (cond ((eq? v #f) 0)
          ((eq? v #t) 1)
          (else (error "Unknown value boolean->digital " v))))

  (define (digital->boolean v)
    (cond ((eq? v 0) #f)
          ((eq? v 1) #t)
          (else (error "Unknown value digital->boolean " v))))

  (define (logical-or s1 s2)
    (boolean->digital (or
                       (digital->boolean s1)
                       (digital->boolean s2))))

  (define (or-gate a1 a2 output)
    (define (or-action-procedure)
      (let ((new-value
             (logical-or (get-signal a1) 
                          (get-signal a2))))
        (after-delay 
         or-gate-delay
         (lambda ()
           (set-signal! output new-value)))))
    (add-action! a1 or-action-procedure)
    (add-action! a2 or-action-procedure)
    'ok)
#+END_SRC
