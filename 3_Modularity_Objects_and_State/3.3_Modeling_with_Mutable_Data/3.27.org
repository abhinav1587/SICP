#+Title: Exercise 3.27
 Memoization (also called tabulation) is a technique that enables a procedure to record, in a local table, values that have previously been computed. This technique can make a vast difference in the performance of a program. A memoized procedure maintains a table in which values of previous calls are stored using as keys the arguments that produced the values. When the memoized procedure is asked to compute a value, it first checks the table to see if the value is already there and, if so, just returns that value. Otherwise, it computes the new value in the ordinary way and stores this in the table. As an example of memoization, recall from 1.2.2 the exponential process for computing Fibonacci numbers:

#+BEGIN_SRC scheme :session memoization :eval no 
(define (fib n)
  (cond ((= n 0) 0)
        ((= n 1) 1)
        (else (+ (fib (- n 1))
                 (fib (- n 2))))))

#+END_SRC

 The memoized version of the same procedure is

#+BEGIN_SRC scheme :session memoization :eval no
(define memo-fib
  (memoize 
   (lambda (n)
     (cond ((= n 0) 0)
           ((= n 1) 1)
           (else 
            (+ (memo-fib (- n 1))
               (memo-fib (- n 2))))))))
#+END_SRC

 where the memoizer is defined as

#+BEGIN_SRC scheme :session memoization :eval no
(define (memoize f)
  (let ((table (make-table)))
    (lambda (x)
      (let ((previously-computed-result 
             (lookup x table)))
        (or previously-computed-result
            (let ((result (f x)))
              (insert! x result table)
              result))))))
#+END_SRC

 Draw an environment diagram to analyze the computation of (memo-fib 3). Explain why memo-fib computes the nth Fibonacci number in a number of steps proportional to n. Would the scheme still work if we had simply defined memo-fib to be (memoize fib)?

* Solution
I'll instead describe the process. 
The call to (memo-fib (- n 1)) would have stored all the computed values of 0 to n - 1, hence the second call, (memo-fib (- n 2)) would not need to generate the same calls again, instead retrieving the computed values from the table. Because of this, the number of steps is proportional to n as opposed to a non memoized fib procedure. 

 
* Tests
#+BEGIN_SRC scheme :session memoization :results output silent
  (define true #t)
  (define false #f)

  (define (make-table predicate?)
    (let ((local-table (list '*table*)))

      (define (assoc key records)
        (cond ((null? records) false)
              ((predicate? key (caar records)) 
               (car records))
              (else (assoc key (cdr records)))))

      (define (lookup key-1 key-2)
        (let ((subtable 
               (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record 
                     (assoc key-2 
                            (cdr subtable))))
                (if record (cdr record) false))
              false)))

      (define (insert! key-1 key-2 value)
        (let ((subtable 
               (assoc key-1 (cdr local-table))))
          (if subtable
              (let ((record 
                     (assoc key-2 
                            (cdr subtable))))
                (if record
                    (set-cdr! record value)
                    (set-cdr! 
                     subtable
                     (cons (cons key-2 value)
                           (cdr subtable)))))
              (set-cdr! 
               local-table
               (cons (list key-1
                           (cons key-2 value))
                     (cdr local-table)))))
        'ok)

      (define (dispatch m)
        (cond ((eq? m 'lookup-proc) lookup)
              ((eq? m 'insert-proc!) insert!)
              (else (error "Unknown operation: 
                              TABLE" m))))
      dispatch))

  (define same-key? equal?)

  (define (memoize f)
    (let ((table (make-table same-key?)))
      (lambda (x)
        (let ((previously-computed-result 
               ((table 'lookup-proc) "test" x)))
          (or previously-computed-result
              (let ((result (f x)))
                ((table 'insert-proc!) "test" x result)
                result))))))

  (define (fib n)
    (cond ((= n 0) 0)
          ((= n 1) 1)
          (else (+ (fib (- n 1))
                   (fib (- n 2))))))

  (define memo-fib
    (memoize 
     (lambda (n)
       (cond ((= n 0) 0)
             ((= n 1) 1)
             (else 
              (+ (memo-fib (- n 1))
                 (memo-fib (- n 2))))))))
#+END_SRC


* Tests
#+BEGIN_SRC scheme :session memoization :exports both
(memo-fib 50)
#+END_SRC

#+RESULTS:
: 12586269025
