#+Title: Exercise 3.37
The celsius-fahrenheit-converter procedure is cumbersome when compared with a more expression-oriented style of definition, such as

#+BEGIN_SRC scheme :eval no
(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))

(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
#+END_SRC

Here c+, c*, etc. are the “constraint” versions of the arithmetic operations. For example, c+ takes two connectors as arguments and returns a connector that is related to these by an adder constraint:

#+BEGIN_SRC scheme :eval no
(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))
#+END_SRC

Define analogous procedures c-, c*, c/, and cv (constant value) that enable us to define compound constraints as in the converter example above.

* Solution
#+BEGIN_SRC scheme
  (define (c- z x)
    (let ((y (make-connector)))
      (adder x y z)
      y))

  (define (c* x y)
    (let ((z (make-connector)))
      (multiplier x y z)
      z))

  (define (c/ z x)
    (let ((y (make-connector)))
      (multiplier x y z)
      y))

  (define (cv value)
    (let ((c (make-connector)))
      (constant value c)
      c))
#+END_SRC
