#+Title: Exercise 3.26

 To search a table as implemented above, one needs to scan through the list of records. This is basically the unordered list representation of 2.3.3. For large tables, it may be more efficient to structure the table in a different manner. Describe a table implementation where the (key, value) records are organized using a binary tree, assuming that keys can be ordered in some way (e.g., numerically or alphabetically). (Compare Exercise 2.66 of Chapter 2.)

* Solution
 The performance of the record implementation of Exercise 2.66 is good only during creation of the table. If data in the table is to be modified, inserted or deleted, it soon becomes unbalanced, which means that the performance of the operations (create, read, update, delete) on the record worsens over time. For a large table, a Red Black tree will be more efficient, where the structure self balances during maintenance. This ensures that the performance of the operations does not degrade with time. For disk based storage, a btree is generally used.

* Reference
1. Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest /Introduction to Algorithms/
