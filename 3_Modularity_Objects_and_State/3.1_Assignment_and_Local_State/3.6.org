#+TITLE: Exercise 3.6
 It is useful to be able to reset a random-number generator to produce a sequence starting from a given value. Design a new rand procedure that is called with an argument that is either the symbol generate or the symbol reset and behaves as follows: (rand 'generate) produces a new random number; ((rand 'reset) ⟨new-value⟩) resets the internal state variable to the designated ⟨new-value⟩. Thus, by resetting the state, one can generate repeatable sequences. These are very handy to have when testing and debugging programs that use random numbers.

The rand procedure from the book
#+BEGIN_SRC scheme :results silent
  (define rand
    (let ((x random-init))
      (lambda () (set! x (rand-update x)) x)))
#+END_SRC

* Solution

Use a dispatch procedure to invoke the internal procedures of rand.
#+BEGIN_SRC scheme :results silent
  (define rand 
    (define x random-init)
    (define generate
      (set! x (rand-update x))
      x)
    (define (reset newvalue)
      (set! x newvalue))
    (define (dispatch symbol)
      (cond ((eq? symbol 'generate) generate)
            ((eq? symbol 'reset)
             (lambda (a)
               (reset a)))))
    dispatch)
#+END_SRC
